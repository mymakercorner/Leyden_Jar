// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

// ----------- //
// col_0_7_pio //
// ----------- //

#define col_0_7_pio_wrap_target 0
#define col_0_7_pio_wrap 9

static const uint16_t col_0_7_pio_program_instructions[] = {
            //     .wrap_target
    0xe027, //  0: set    x, 7
    0x6808, //  1: out    pins, 8                [8]
    0x5b08, //  2: in     pins, 8                [27]
    0xbf42, //  3: nop                           [31]
    0xbf42, //  4: nop                           [31]
    0x7f08, //  5: out    pins, 8                [31]
    0xec47, //  6: set    y, 7                   [12]
    0x1f87, //  7: jmp    y--, 7                 [31]
    0x0041, //  8: jmp    x--, 1
    0xc000, //  9: irq    nowait 0
            //     .wrap
};

static const struct pio_program col_0_7_pio_program = {
    .instructions = col_0_7_pio_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config col_0_7_pio_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + col_0_7_pio_wrap_target, offset + col_0_7_pio_wrap);
    return c;
}

static inline void col_0_7_pio_init(PIO pio, uint sm, uint offset, uint inPin, uint outPin) {
    pio_sm_config c = col_0_7_pio_program_get_default_config(offset);
    // Out pins configuration
    sm_config_set_out_pins(&c, outPin, 8);
    for (uint i=0; i<8; i++)
        pio_gpio_init(pio, outPin + i);
    // In pins configuration
    sm_config_set_in_pins(&c, inPin);
    for (uint i=0; i<8; i++)
        pio_gpio_init(pio, inPin + i);
    sm_config_set_set_pins(&c, outPin, 1);
    // Each clock tick will be appromimately 0.1us
    float div = ((float)clock_get_hz(clk_sys)) / (10.f*1000.f*1000.f);
    sm_config_set_clkdiv(&c, div);
    // Initializes TX/RX fifos
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_in_shift(&c, true, true, 32);
    pio_sm_set_consecutive_pindirs(pio, sm, outPin, 8, true);
    // Init the state machine
    pio_sm_init(pio, sm, offset, &c);
}


